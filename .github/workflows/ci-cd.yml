name: Build, Deploy & Test WSO2MI on Minikube

on:
  push:
    branches: [main]

jobs:
  # ---------- STAGE 1: Build ----------
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Minikube
      uses: medyagh/setup-minikube@master
      with:
        kubernetes-version: v1.30.0

    - name: Enable Minikube Docker Env
      run: |
        eval $(minikube docker-env)

    - name: Build WSO2MI Docker Image
      run: |
        docker build -t wso2mi-local:latest \
          --build-arg BASE_IMAGE=wso2/wso2mi:4.4.0 \
          -f deployment/docker/Dockerfile \
          deployment/docker

    - name: Save Docker Image to Tar
      run: docker save wso2mi-local:latest -o wso2mi.tar

    - name: Upload Image Artifact
      uses: actions/upload-artifact@v4
      with:
        name: wso2mi-image
        path: wso2mi.tar

  # ---------- STAGE 2: Deploy ----------
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Set up Minikube
      uses: medyagh/setup-minikube@master
      with:
        kubernetes-version: v1.30.0

    - name: Download Image Artifact
      uses: actions/download-artifact@v4
      with:
        name: wso2mi-image

    - name: Load Docker Image into Minikube
      run: |
        eval $(minikube docker-env)
        docker load -i wso2mi.tar

    - name: Deploy to Minikube
      run: |
        kubectl apply -f k8s/deployment.yaml
        kubectl rollout status deployment/wso2mi --timeout=120s

    - name: Upload Kube Config
      run: |
        mkdir -p ~/.kube
        cp ~/.kube/config kubeconfig
      shell: bash

    - uses: actions/upload-artifact@v4
      with:
        name: kubeconfig
        path: kubeconfig

  # ---------- STAGE 3: Test ----------
  test:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Download Kube Config
      uses: actions/download-artifact@v4
      with:
        name: kubeconfig

    - name: Restore Kube Config
      run: |
        mkdir -p ~/.kube
        cp kubeconfig ~/.kube/config

    - name: Port Forward WSO2MI
      run: |
        nohup kubectl port-forward service/wso2mi-service 8290:8290 &
        sleep 5

    - name: Test /data Endpoint
      run: |
        echo "Testing /data..."
        curl -v http://localhost:8290/data
